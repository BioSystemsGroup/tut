2015-04-29  gepr  <gepr@tempusdictum.com>

	* view/Observer.java: Create a specific output file for your target based on the parameter file name and the Model's class name.

	* model/Tight.java (Tight): New name for the tightly coupled (previous) model.  Use new comps ArrayList rather than individual variables.

	* model/Model.java (comps): ArrayList to contain componentss and subclass objects.  Main purpose is to avoid having to write a specific Observer for each Model.  Move model specifics to the new Tight subclass.

	* model/[Comp,FunctionCall,Locale]: Make Comp a super class with FunctionCall for old model and Locale for new model.
	(describe()): Remove.

	* ctrl/Batch.java (MODEL_ORDER): Move from Model.
	(load()): Rename old model to Tight.  Add new model Loose.  
	(setupOutput()): Prepend output file names with the first part of the JSON parameter file name.

	* Main.java (main()): Use first part of JSON parameter file as the experiment name and send to the Batch control.

2015-04-27  gepr  <gepr@tempusdictum.com>

	* view/Observer.java (init()): Change 1st column name of output from Cycle to Time.

	* ctrl/Batch.java (constructor): Add an expName to help keep track of experiments.

	* Main.java (MAJOR_VERSION): Bump.
	(main()): Pass root of the parameter file into Batch to be used as the expName.

2015-04-24  gepr  <gepr@tempusdictum.com>

	* view/Observer.java (step()): Change output to CSV format.

	* model/Model.java (k_*): Remove IVar flow rates and just reference params object.
	(cycle2time): More samples from cycle to 1/4 cycles so that we get a smoother curve.
	(init(),calcConstants()): Calculate the constants A,B,α,β. Set concentration functions for each compartment.
	(concCent(),concPeriph()): Convenience methods for creating the 2 lambdas.

	* model/Comp.java (k_in,k_out): Remove for 1st replication of 2 compartment model.
	(func): Lambda function passed in from Model to calculate my amount (concentration).
	(step()): Execute the lambda expression against current schedule time/cycle.

	* ctrl/Parameters.java (dose,vc): Add dose and central volume to parameters.

2015-04-23  gepr  <gepr@tempusdictum.com>

	* view/Observer.java (Constructor): Take a Parameters instance as an argument.
	(init(),step()): Output percentage complete to the stdout.

	* model/Model.java (pRNG): Move from Batch to Model.

	* ctrl/Parameters.java (writeYourself(), describe()): Change so that we now only output a JSON String which is either written to a file or echoed to stdout by Batch or Main, respectively.

	* ctrl/GUI.java (finish()): Called by GUI when stop button is hit.

	* ctrl/Batch.java (setupOutput()): Create a (date-named) directory to hold all the output.  Change stdout output to write to an output.log file in that directory.  Write the Parameters to a JSON file in that directory.
	(finish()): New method executed when the stop button is hit in the GUI or called directly by Main.main().

	* ctrl/Parameters.java (writeYourself()): Put version and current time in the JSON file name.
	(readOneOfYou()): Use an InputStream instead of a File.

	* Main.java (main()): Add command line option to pass in a parameter file.  If no parameter file name is passed in, use the default one in the jar file.
	(VERSION): Add a final class variable to log the version being executed.
	("-epf"): Change -wpf to -epf to mean "echo parameter file", which echoes the parameter file to the stdout.
	


