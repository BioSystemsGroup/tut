2015-07-06  gepr  <gepr@tempusdictum.com>

	* view/ObsSymptom.java (measure()): Use LocaleDyn.getSymptom() rather than peeking inside the object.

	* model/LooseDyn.java (instantiate()): Add blockDuration to setController() call.

	* model/LocaleDyn.java (getSymptom()): New query for use by the ObsSymptom in order to decouple the calculation of Symptom from the Controller and Detector actions. (Observers execute after Model elements.)
	(blockDuration): Add to setController().

	* model/Detector.java (Site): New inner class representing a detector Site.  This allows us to have an "occupant" (an MPO) and a boolean designating whether it's "blocked" or not.
	(sites): No longer a fixed size array with some null entries.  Now an array with a fixed number of Sites inside it.
	(releaseSites()): Look to see if the Site is occupied, pRNG draw to unset it to null.  Changed from looking for null values indexed by the array.
	(occupySites()): No longer look for null entries in the array.  Now look for Sites with null occupants.

	* model/Controller.java (constructor): Add blockDuration to constructor and call to Detector constructor.
	(actions): Renamed adjustSymptom() -> adjustBlocks().  Place adjustBlocks() separately on the actions list from adjustMPOs().

2015-07-02  gepr  <gepr@tempusdictum.com>

	* model/LooseDyn.java (Loose): Pass parameters in through setController() and setMorbidity() rather than allowing them to use the Parameters structure.

	* model/LocaleDyn.java (Detector,Controller,MPO): Move out of here.  Move MPO into named inner class of Detector.
	(useMPO): Remove all elements of the non-MPO Symptom calculations.  It's fossilized in tut-v0.6 anyway.
	(setMorbidity(), setController()): Pass relevant parameters in rather than allowing them to access Parameters.
	(step()): Access IVars rather than Parameters.

	* model/Controller,model/Detector: Promote from inner classes to proper classes (disallowing them automatic access to LocaleDyn's variables).

	* model/Comp.java: Change parameter from uninformative "i" to "ident".

	* ctrl/Parameters.java (drug2symptom, mp2symptom): Remove.
	(mp2mpo,detectorSites,P_occupySite,P_releaseMPO): Add.

2015-07-01  gepr  <gepr@tempusdictum.com>

	* model/LocaleDyn.java (actions, symptomFromDetectedMPO()): Only schedule relieveSymptom() when useMPO == false.  When useMPO == true, adjustSymptom() does the work of both incrementing and decrementing Symptom according to the rule: Symptom = (1-(drugPotency/|Sites|))*|occupiedSites|.

2015-06-29  gepr  <gepr@tempusdictum.com>

	* model/SlaveAgent.java: Parent class of Controller and Detector.  Executes its sub-actions from a randomized ArrayList<Steppable>.

	* model/LocaleDyn.java: Change Controller to extend the new SlaveAgent.  Add Detector SlaveAgent to LocaleDyn (sibling to Controller).  Add switch to useMPO, if true, otherwise revert back to mechanism where Symptom = sigmoid(MP).  Change Controller methods to Steppables executed in pRNG order.  Detector uses 2 lists: mpolist (for the MPOs created from MP) and sites, which is a fixed size ArrayList.  When a site is empty, it contains "null", which means after initialization, we don't use add() or remove(), only set().  A different data structure would probably be better, frankly.

2015-06-22  gepr  <gepr@tempusdictum.com>

	* Main.java (MAJOR_VERSION): Bump.

	* ctrl/Parameters.java (test(), testNet(), readOneOfYou()): Add back in the tests for the existence of the base Maps.  New test for the existence of the lRates and ldRates Maps of Maps.  Still just testing for existence and logging if they fail.

2015-06-19  gepr  <gepr@tempusdictum.com>

	* model/LocaleDyn.java (morbidity,controller): Promote from variables to 2nd class agents, slaves of their LocaleDyn Compartments.  They are inner classes only instantiated if the model calls setMorbidity() or setController().  They inherit their context from their LocaleDyn and are executed by LocaleDyn, even though they implement Steppable.

2015-06-18  gepr  <gepr@tempusdictum.com>

	* view/ObsMP.java (measure()): Call the new LooseDyn.countMP().

	* model/LooseDyn.java (instantiate()): Add an estimate of maximum MP that will be generated for the whole simulation and pass that to the Controller for use in the Sigmoid (maps [0,maxMP] -> [0,maxSymptom].
	(countMP(), sumMP()): Use to estimate the total MP present in the entire model, which is used by the Sigmoid for incrementing Symptom from MP.

	* model/Loose.java (step()): Output time to the log file.

	* model/LocaleDyn.java (sigtop, setController()): Add new IVar to calculate the upper end of the MP domain for use in the Sigmoid: symptom += Sigmoid(0,10,0,sigtop,MP).
	(handleMorbidity()): Increase Morbidity as a function of time: Morbidity += Morbidity*morbFactor.
	(createSymptom()): Use the Sigmoid to calculate the symptom increment and the MP decrement.

	* ctrl/Parameters.java (morbFactor): Amount to increase morbidity each cycle.

2015-06-17  gepr  <gepr@tempusdictum.com>

	* model/LooseDyn.java (instantiate()): Move Controller from Sink to Central.

	* ctrl/Batch.java (mLDObS): Renamed from mLDObP (pain -> symptom).

	* view/ObsSymptom.java: Replaced ObsPain.

	* view/ObsMP.java: Replaced ObsMarker.

	* Batch, Parameters, LocalDyn, LooseDyn (marker, pain): marker -> mp, Marker -> MP, mark -> mp.  pain -> symptom.

2015-06-16  gepr  <gepr@tempusdictum.com>

	* model/LooseDyn.java (init()): Now have to override init() in order to add "Marker" rates to the input maps.

	* model/Loose.java (init()): More complex ins structure to incorporate different rates for different particles.

	* model/Locale.java (ins): Changed to Map<Comp,Map<String,Double>> so that inputs can reference several particles, each with their own rate constants, but still over the same network.
	(step()): Get a set of rate constants for each particle type.

	* ctrl/Parameters.java (lRates, ldRates, Edge): Split out rate constants as a sub object (Map of Maps).  Added separate rate constants for LooseDyn so that Loose only has constants for "Drug", but LooseDyn has constants for both "Drug" and "Marker".  Add Edge inner class to index the rate constants according to "from" and "to".  Have not yet replaced the validity tests for the new structure.  Also replaced Gson with Genson because Gson did not correctly [de]serialize nested objects by default.

2015-06-15  gepr  <gepr@tempusdictum.com>

	* model/LocaleDyn.java (eliminateMarker()): Stop destroying Marker when Pain >= 10.

2015-06-13  gepr  <gepr@tempusdictum.com>

	* model/LooseDyn.java (instantiate()): Move the setting of [reliefBottom, reliefTop] from setMorbidity() to setController().

	* model/LocaleDyn.java (setController(), setMorbidity()): Moved [reliefBottom, releifTop] from setMorbidity() to setController() where it belongs.
	(handleMorbidity()): Use new morb2mark parameter.
	(eliminateMarker(), relievePain()):  Use new mark2pain and drug2pain parameters.

	* ctrl/Parameters.java (morb2mark, mark2pain, drug2pain): New looseDyn parameters.
	(test()): 2 new methods to ensure all necessary parameters are present.  Missing parameters are reported to the Batch.log output file.
	(readOneOfYou()): new polymorph, one takes a string, the other takes the input stream.  This allows us to re-read the string several times without messing with the file pointer.

	* ctrl/GUI.java: Change the way this manages the Batch so that we can write to the Batch.log earlier.

	* ctrl/Batch.java: Change the way Batch is invoked, managed by GUI, seed, etc. in order to allow early exceptions that occur when reading parameter files to be written to the Batch.log.
	(writeParameters(), setupOutput()): separate this functionality so that output can be set up before parameters are read.

	* Main.java (main()): Send parameter file input stream to Batch, rather than the instantiated Parameters object.

2015-06-12  gepr  <gepr@tempusdictum.com>

	* view/ObsMarker.java: New.

	* view/Obs.java (writeHeader()): Promote generic header from ObsPain to here because it's used for ObsMarker as well.

	* ctrl/Batch.java (load()): Create and schedule the ObsMarker.

2015-06-11  gepr  <gepr@tempusdictum.com>

	* view/[ObsDrug|ObsPain]: Replaced ObsCompound and ObsAcc.

	* model/Loose.java (getConc(), dose()): Use new particles Map.

	* model/[Model|Tight|Loose|LooseDyn]: LooseDyn now inherits from Loose.  init() split out a new method instantiate() which is overridden by the subclasses to handled different code for instantiation.

	* model/LocaleDyn.java (morbidity, setMorbidity(), pain, controller, setController()): Morbidity changed from boolean to double.  Acc moved from LooseDyn to LocaleDyn and renamed "pain".  Added controller boolean, which will govern the relationship between marker and pain.
	(step()): Add call to eliminateMarker() governed by controller.

	* model/Locale.java (step()): Change to use the particles Map.  Loop through all elements of particles (though Loose only has the one.)

	* model/FunctionCall.java (step()): Use new particles Map to update amount of "Drug".

	* model/Comp.java (drug, particles): Move from explicit double IVar drug to a Map of MutableDoubles that will only contain "Drug" for Loose, but will contain both "Drug" and "Marker" for LooseDyn.

	* ctrl/Parameters.java (looseDyn.morbidity): New sublist for LooseDyn and new morbidity parameter.

	* ctrl/Batch.java (load()): Change ObsCompound to ObsDrug.

	* model/Model, model/Tight (dose_time, dose()): Allow the sim to run for awhile before being dosed.  Tight concentrations are kept at zero until the model is dosed.

	* model/Loose, model/LooseDyn (init()): Start with Source compound concentration set to 0.0.  Implement a dose() function.

	* model/LocaleDyn.java (handleMorbidity): Remove discrete event for morbidity signal.  Set directly in the LooseDyn.

	* ctrl/Parameters.java (doseTime): Add doseTime parameter so sim will execute for awhile before being dosed.

2015-06-09  gepr  <gepr@tempusdictum.com>

	* view/Obs.java (init()): With the new observer, we need a new file, distinguished by adding the name of the Obs subclass.

	* model/LooseDyn.java (acc): Change acc from Integer to Double to allow half-steps.

	* model/LocaleDyn.java (handleMorbidity()): Reduce reliefMorbidity intensity to a half-step.  Conver registerMorbidity to use time (in hours) rather than cycles.

	* ctrl/Parameters.java ("initialAcc", "morbidityDelay"): New parameters, one for the initial value of acc, one for the time (in hours) from morbidity handling in the LocaleDyn to registration of it with the LooseDyn.

	* ctrl/Batch.java (load()): Instantiate an ObsAcc.

	* view/Obs.java: Renamed from Observer, made abstract.

	* view/ObsCompound.java: Implement compound specific observation.

	* model/LooseDyn.java (relieveMorbidity(), registerMorbidity()): New functions to decrement and increment the "pain" accumulator, acc.

	* model/LocaleDyn.java: Subclass of Locale which sends DE scheduled morbidity signals back to the LooseDyn model.

	* model/Locale.java (ins): Allow subclasses of Comp.

	* model/Comp.java (abstract): Don't need the abstract qualifier anymore.

	* ctrl/Batch.java (LooseDyn): Add a dynamic version of the Loose model, where the model changes according to discrete event signals from one or more Compartments.
	(ObsCompound): Use new implementation for concentration and fraction observer.
	(load()): Instantiate, init, and schedule the new LooseDyn model.
	(go(), finish()): Remove user feedback, which is useless while the simulation executes so fast.

2015-06-01  gepr  <gepr@tempusdictum.com>

	* view/Observer.java (fraction,step()): Measure dose fraction rather than concentration.
	(Steppable): Append ".conc" or ".fract" to column name.

	* model/Tight.java (getConc()): Moved from FunctionCall.
	(getFraction()): New, measures dose fraction rather than concentration.

	* model/Model.java: Made abstract for getConc() (moved from Comp) and getFraction() (which is new).

	* model/Loose.java (Model,init()): Convenience IVars for dose and vc, since getFraction() needs them.
	(getConc()): Moved from Comp and Locale.
	(getFraction()): New, for measuring dose fraction rather than concentration.

	* model/Comp, model/FunctionCall, model/Locale (getConc()): Moved to Model (abstract), Tight and Loose.

2015-05-08  gepr  <gepr@tempusdictum.com>

	* ctrl/Batch.java (constructor): Use System.currentTimeMillis() if Parameters contains a null seed.

2015-05-07  gepr  <gepr@tempusdictum.com>

	* model/Tight.java (init()): Set Function type (<Double,Double>).

	* ctrl/GUI.java (constructor): Replace console.setThreadPriority(1), which is deprecated, with Thread.currentThread().setPriority(1).

	* view/Observer.java (step()): When timeLimit is reached, don't reschedule myself.  Convert between MASON type and our subject's model time.

	* model/Tight.java (init()): Accept timeLimit and cyclePerTime inputs.
	(concCent(), concPeriph()): Convert input cycles into model time by dividing by model-specific cyclePerTime.

	* model/Model.java (timeLimit,cyclePerTime): New IVars.  Time inside models is model time.  Time in Batch is MASON time.
	(step()): Don't reschedule myself if my timeLimit is reached.  Set my sub-Comps to finished if timeLimit is reached.

	* model/Loose.java (constructor): Accept timeLimit and cyclePerTime inputs.  Send volumes to Comps.  Use new parameters src2cent, peri2cent, cent2peri, cent2sink.

	* model/Locale.java (constructor): Set the Comp's volume.
	(getConc()): Return amount/volume.

	* model/FunctionCall.java (getConc()): Returns the simple amount.

	* model/Comp.java (finished): Set by Model when timeLimit is reached.  Prevents the Comp from rescheduling itself.
	(getConc()): Abstract function wrapping each Comp's division by its volume.

	* ctrl/Parameters.java (loose): New Map to contain separate parameters for the Loose model.
	(timeLimit, cyclePerTime): Set for each model.

	* ctrl/GUI.java (start()): Set to pause at batch.getMaxCycle().

	* ctrl/Batch.java (cycleLimit): Change from using the same time mapping in both models to using different time mappings for each model.  Batch works in MASON cycles/time, whereas the models work in their own time.  Cycles are mostly double-valued.
	(model[TL]): Keep track of models with more meaningful variable names.
	(load()): Send per-model timeLimit and cyclePerTime to the models in their init() method.
	(go()): Stop when all models are finished.  Move System.out from Observer to here.
	(getMaxCycle()): Convenience to get the maximum cycle based on all models' timeLimits.

	* Main.java (parameters.json): Rename back from batch.json.

2015-05-01  gepr  <gepr@tempusdictum.com>

	* model/Tight.java (dose,vc,k_a,k_10,k_12,k_21): Convenience IVars given the verbosity of accessing the new Parameters Maps.
	(calcConstants()): Moved from superclass since it won't be used by Loose in the next iteration.

	* model/Model.java (calcConstants()): Move back down into Tight, since Loose won't be using them for the next iteration.

	* model/Loose.java (params): Access params.[tight|batch] maps rather than IVars.

	* ctrl/Parameters.java (batch,tight): Remove myriad IVars and replace with Map<String,Number>s.

	* ctrl/GUI.java (start()): Simply use the Batch.cycleLimit IVar rather than the params content.

	* ctrl/Batch.java (constructor): Get parameters from the new Paramters.[batch|tight] maps.

	* Main.java (MINOR_VERSION): Use just "ver" svn:keyword instead of the whole "id".
	(main()): Put "-epf" flag first so we can write the default Parameters object.

2015-04-29  gepr  <gepr@tempusdictum.com>

	* Main.java (MAJOR_VERSION): Bump.

	* view/Observer.java: Create a specific output file for your target based on the parameter file name and the Model's class name.

	* model/Tight.java (Tight): New name for the tightly coupled (previous) model.  Use new comps ArrayList rather than individual variables.

	* model/Model.java (comps): ArrayList to contain componentss and subclass objects.  Main purpose is to avoid having to write a specific Observer for each Model.  Move model specifics to the new Tight subclass.

	* model/[Comp,FunctionCall,Locale]: Make Comp a super class with FunctionCall for old model and Locale for new model.
	(describe()): Remove.

	* ctrl/Batch.java (MODEL_ORDER): Move from Model.
	(load()): Rename old model to Tight.  Add new model Loose.  
	(setupOutput()): Prepend output file names with the first part of the JSON parameter file name.

	* Main.java (main()): Use first part of JSON parameter file as the experiment name and send to the Batch control.

2015-04-27  gepr  <gepr@tempusdictum.com>

	* view/Observer.java (init()): Change 1st column name of output from Cycle to Time.

	* ctrl/Batch.java (constructor): Add an expName to help keep track of experiments.

	* Main.java (MAJOR_VERSION): Bump.
	(main()): Pass root of the parameter file into Batch to be used as the expName.

2015-04-24  gepr  <gepr@tempusdictum.com>

	* view/Observer.java (step()): Change output to CSV format.

	* model/Model.java (k_*): Remove IVar flow rates and just reference params object.
	(cycle2time): More samples from cycle to 1/4 cycles so that we get a smoother curve.
	(init(),calcConstants()): Calculate the constants A,B,α,β. Set concentration functions for each compartment.
	(concCent(),concPeriph()): Convenience methods for creating the 2 lambdas.

	* model/Comp.java (k_in,k_out): Remove for 1st replication of 2 compartment model.
	(func): Lambda function passed in from Model to calculate my amount (concentration).
	(step()): Execute the lambda expression against current schedule time/cycle.

	* ctrl/Parameters.java (dose,vc): Add dose and central volume to parameters.

2015-04-23  gepr  <gepr@tempusdictum.com>

	* view/Observer.java (Constructor): Take a Parameters instance as an argument.
	(init(),step()): Output percentage complete to the stdout.

	* model/Model.java (pRNG): Move from Batch to Model.

	* ctrl/Parameters.java (writeYourself(), describe()): Change so that we now only output a JSON String which is either written to a file or echoed to stdout by Batch or Main, respectively.

	* ctrl/GUI.java (finish()): Called by GUI when stop button is hit.

	* ctrl/Batch.java (setupOutput()): Create a (date-named) directory to hold all the output.  Change stdout output to write to an output.log file in that directory.  Write the Parameters to a JSON file in that directory.
	(finish()): New method executed when the stop button is hit in the GUI or called directly by Main.main().

	* ctrl/Parameters.java (writeYourself()): Put version and current time in the JSON file name.
	(readOneOfYou()): Use an InputStream instead of a File.

	* Main.java (main()): Add command line option to pass in a parameter file.  If no parameter file name is passed in, use the default one in the jar file.
	(VERSION): Add a final class variable to log the version being executed.
	("-epf"): Change -wpf to -epf to mean "echo parameter file", which echoes the parameter file to the stdout.
	


